Pulp Fixtures
=============

Pulp Fixtures is a collection of raw fixture data, scripts for compiling that
data into a useful format, and make targets for controlling the whole mess.

Why does Pulp Fixtures exist? It exists so that the fixture data used by `Pulp
Smash`_  can easily be recreated, and can be altered in a controlled way. Pulp
Smash does not directly make use of Pulp Fixtures. Instead:

1. A user clones the Pulp Fixtures repository. The "user" could be a human, or
   a bot like Jenkins.
2. The user compiles the fixture data they want.
3. The user uploads that fixture data to an HTTP server.
4. The user ensures that their Pulp Smash installation is configured to use the
   uploaded fixture data. See `pulp_smash.constants`_.

For exact usage instructions, clone this repository and run ``make help``.

Dependencies
------------

The make targets and fixture generation scripts do little more than call out to
system utilities and mangle the results. It's the user's responsibility to
ensure the necessary utilities are available and usable. Dependencies are listed
below, according to make target. Common system utilities like ``fmt``, ``patch``
and ``realpath`` are omitted.

All RPM, SRPM and DRPM fixtures are signed with an OpenPGP-compatible keypair,
except where otherwise stated.

.. WARNING:: The private key used to sign RPM, SRPM and DRPM files is publicly
    available. The signatures on these files afford absolutely *no* security.
    The signatures are present only for testing purposes.

``lint``
    The ``shellcheck`` executable must be available.

``fixtures/docker``
    The ``docker`` utility must be available.

    Ensure the service is running and usable by the current user. This may
    require adding the current user to an appropriate group and reloading
    permissions, with a command such as ``gpasswd --add $(id -u) docker &&
    newgrp``.

``fixtures/drpm-unsigned``
    The ``createrepo``, ``makedeltarpm`` and ``rpmsign`` utilities must be available.

``fixtures/python``
    No exotic dependencies are needed.

``fixtures/rpm``
    The ``createrepo`` and ``modifyrepo`` utilities must be available.

``fixtures/rpm-erratum``
    The ``md5sum`` and ``sha256sum`` executables must be available. Note:

    * The generated erratum has no top-level ``id`` element. One must be
      inserted to make the erratum valid. Even then, Pulp may not accept the
      erratum. See `Pulp #2020`_.
    * There is no schema for errata. The erratum generated by this script is
      based primarily on the `Pulp RPM Errata`_ documentation. As a result, this
      target may exhibit erroneous behaviour.

``fixtures/rpm-invalid-updateinfo``
    See ``fixtures/rpm``.

``fixtures/rpm-unsigned``
    The ``createrepo``, ``modifyrepo`` and ``rpmsign`` utilities must be available.

``fixtures/rpm-updated-updateinfo``
    See ``fixtures/rpm``.

``fixtures/srpm``
    The ``createrepo`` and ``modifyrepo`` utilities must be available.

``fixtures/srpm-unsigned``
    The ``createrepo``, ``modifyrepo`` and ``rpmsign`` utilities must be available.

Package Signatures
------------------

The RPM, SRPM and DRPM assets are signed, and signatures are stripped as needed
when generating fixtures. The opposite approach of using unsigned fixtures and
signing them as needed is safer, as it better prevents the keypair from going
out of sync with fixtures. However, the sign-as-needed approach is not taken
because installing and configuring GnuPG can be a hassle.

Should any new assets need to be signed, or should any existing assets need to
be re-signed, a brief guide to doing so follows.

First make sure you have ``gnupg2`` and ``rpm-sign`` packages installed. Then
import the private key by running ``gpg2 --import
rpm/GPG-RPM-PRIVATE-KEY-pulp-qe``. Create or update the ``~/.rpmmacros`` file
with the following lines::

    %_signature gpg
    %_gpg_name  Pulp QE

That will ensure the RPM sign is going to use the Pulp QE key imported
previously. Finally, sign the packages and verify their signatures with:

.. code-block:: sh

    find rpm \( -name '*.rpm' -o -name '*.srpm' -o -name '*.drpm' \) | xargs rpm --addsign
    find rpm \( -name '*.rpm' -o -name '*.srpm' -o -name '*.drpm' \) | xargs rpm --checksig

If the package is not signed then an output line like
``fixtures/rpm-unsigned/lion-0.4-1.noarch.rpm: sha1 md5 OK`` will be shown, on
the other hand, if the package is signed, an output line like
``fixtures/rpm/lion-0.4-1.noarch.rpm: (RSA) sha1 ((MD5) PGP) md5 NOT OK (MISSING
KEYS: RSA#269d9d98 (MD5) PGP#269d9d98)``. Be aware that the ``MISSING KEYS``
message is present because the public key was not imported to the RPM keys
store, and you probably will not want to import it since the key is not safe.

.. _Pulp #2020: https://pulp.plan.io/issues/2020
.. _Pulp RPM Errata:
    https://docs.pulpproject.org/plugins/pulp_rpm/tech-reference/yum-plugins.html#errata
.. _Pulp Smash: http://pulp-smash.readthedocs.io
.. _pulp_smash.constants:
    https://pulp-smash.readthedocs.io/en/latest/api/pulp_smash.constants.html
